import { useState } from "react";
import axios from "axios";

const GeminiChat = () => {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleInputChange = (e) => {
    setInput(e.target.value);
  };

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage = { role: "user", text: input };
    setMessages((prev) => [...prev, userMessage]);
    setLoading(true);
    setError(null);
    setInput("");

    const trainerPrompt = `
–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –∂–µ—Å—Ç–∫–æ–≥–æ, –Ω–æ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä–∞. –û—Ç–≤–µ—á–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ, –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É–±–æ, –Ω–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç—Ä–µ–Ω–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ üí™üî•üò§. –ü—Ä–∏–º–µ—Ä:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ú–Ω–µ –ª–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è"
–¢—Ä–µ–Ω–µ—Ä: "–õ–µ–Ω—å ‚Äî —Ç–≤–æ–π –≤—Ä–∞–≥! üò§ –ü–æ–¥–Ω–∏–º–∞–π—Å—è —Å –¥–∏–≤–∞–Ω–∞ –∏ –¥–µ–ª–∞–π 20 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –•–æ—á–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –¥–µ–π—Å—Ç–≤—É–π! üí•üí™"
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${input}"
`;

    try {
      const res = await axios.post(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyAo_H2fkN00fjm-sQkU2t2EdNDeSlx9Zeg`,
        {
          contents: [
            {
              parts: [{ text: trainerPrompt }],
            },
          ],
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      const botText = res.data.candidates[0].content.parts[0].text;

      const botMessage = {
        role: "bot",
        text: botText || "–û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.",
      };

      setMessages((prev) => [...prev, botMessage]);
    } catch (err) {
      console.error(err);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div
      style={{
        maxWidth: "700px",
        margin: "50px auto",
        padding: "2rem",
        backgroundColor: "#f3f4f6",
        borderRadius: "16px",
        boxShadow: "0 10px 25px rgba(0,0,0,0.1)",
        fontFamily: "Inter, sans-serif",
      }}
    >
      <h2 style={{ fontSize: "1.75rem", fontWeight: "600", marginBottom: "1.5rem" }}>
        Trainer Bot
      </h2>

      <div style={{ maxHeight: "400px", overflowY: "auto", marginBottom: "1rem", padding: "1rem", backgroundColor: "#fff", borderRadius: "12px", border: "1px solid #e5e7eb" }}>
        {messages.map((msg, idx) => (
          <div
            key={idx}
            style={{
              textAlign: msg.role === "user" ? "right" : "left",
              marginBottom: "1rem",
            }}
          >
            <div
              style={{
                display: "inline-block",
                backgroundColor: msg.role === "user" ? "#4f46e5" : "#e0e7ff",
                color: msg.role === "user" ? "white" : "#1e1b4b",
                padding: "10px 14px",
                borderRadius: "12px",
                maxWidth: "80%",
                wordWrap: "break-word",
              }}
            >
              {msg.text}
            </div>
          </div>
        ))}
      </div>

      {error && <p style={{ color: "red", marginBottom: "1rem" }}>{error}</p>}

      <div style={{ display: "flex", alignItems: "center", gap: "12px" }}>
        <div style={{ position: "relative", flexGrow: 1 }}>
          <input
            type="text"
            value={input}
            onChange={handleInputChange}
            onKeyDown={(e) => e.key === "Enter" && handleSend()}
            placeholder="–ù–∞–ø–∏—à–∏ —Ç—Ä–µ–Ω–µ—Ä—É..."
            className="uiverse-input"
            style={{
              width: "100%",
              padding: "12px 16px",
              borderRadius: "12px",
              border: "1px solid #d1d5db",
              fontSize: "1rem",
              outline: "none",
              transition: "0.2s ease",
              boxShadow: "0 2px 4px rgba(0,0,0,0.05)",
            }}
          />
        </div>

        <button
          onClick={handleSend}
          disabled={loading}
          style={{
            padding: "12px 18px",
            borderRadius: "12px",
            border: "none",
            backgroundColor: "#4f46e5",
            color: "white",
            fontWeight: "500",
            cursor: loading ? "not-allowed" : "pointer",
            boxShadow: "0 4px 14px rgba(79, 70, 229, 0.4)",
            transition: "0.3s ease",
          }}
        >
          {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
        </button>
      </div>
    </div>
  );
};

export default GeminiChat;
